import pip
pip.main(['install', 'pytelegrambotapi'])
import os
import sys
import collections
import time
import os
import json
import asyncio
import traceback

from background import keep_alive
from datetime import datetime  # ‚úÖ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ù–£–ñ–ï–ù
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.environ.get("BOT_TOKEN")
CONTACT_URL = "https://t.me/portishead_berlin"

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
def load_categories(path="config/categories.json"):
    if not os.path.exists(path):
        print(f"‚ùå Categories file '{path}' not found.")
        return {}
    try:
        with open(path, encoding="utf-8") as f:
            data = json.load(f)
            return data
    except Exception as e:
        print(f"‚ùå Error loading categories: {type(e).__name__}: {e}")
        traceback.print_exc()
        return {}

categories = load_categories()

print(f"üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(categories)}")
for key, name in categories.items():
    print(f"  ‚îî‚îÄ‚îÄ {key}: {name}")

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def load_all_lots(folder="data/products"):
    lots = {}
    category_files = collections.defaultdict(list)

    if not os.path.exists(folder):
        print(f"‚ùå Folder '{folder}' not found.")
        return lots

    for root, _, files in os.walk(folder):
        for filename in files:
            if filename.endswith(".json"):
                path = os.path.join(root, filename)
                try:
                    with open(path, encoding="utf-8") as f:
                        data = json.load(f)
                        lots[filename[:-5]] = data
                        rel_path = os.path.relpath(path, folder)
                        category = os.path.relpath(root, folder)
                        category_files[category].append(filename)
                except Exception as e:
                    print(f"‚ùå Error in: {path}: {type(e).__name__}: {e}")
                    traceback.print_exc()

    print(f"\nüì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(lots)}")
    for cat, files in category_files.items():
        print(f"  ‚îî‚îÄ‚îÄ üì¶ {cat}: {len(files)}")
        for fname in files:
            print(f"      ‚îî‚îÄ‚îÄ {fname}")
    return lots

products = load_all_lots()

# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
for product in products.values():
    price = product.get("price", "")
    name = product.get("name", "")
    # Remove any existing prefix like "‚úÖ ‚Ç¨... | "
    if name.startswith("‚úÖ ‚Ç¨") and "|" in name:
        name = name.split("|", 1)[-1].strip()
    product["name"] = f"‚úÖ ‚Ç¨{price} | {name}"

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
def load_text(name, folder="data/texts"):
    if not os.path.exists(folder):
        print(f"‚ùå Folder '{folder}' not found.")
        return ""
    path = os.path.join(folder, f"{name}.json")
    try:
        with open(path, encoding="utf-8") as f:
            data = json.load(f)
            return data["text"]
    except Exception as e:
        print(f"‚ùå Error in: {path}: {type(e).__name__}: {e}")
        traceback.print_exc()
        return ""

warranty_text = load_text("warranty")
delivery_text = load_text("delivery")
payment_text = load_text("payment")
about_text = load_text("about")
services_text = load_text("services")

# üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã-—Ñ–∞–±—Ä–∏–∫–∏
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about"),
            InlineKeyboardButton("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è", callback_data="warranty")
        ],
        [
            InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery"),
            InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞", callback_data="payment")
        ],
        [
            InlineKeyboardButton("üõ†Ô∏è –£—Å–ª—É–≥–∏", callback_data="services")
        ],
        [
            InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="available")
        ],
        [
            InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=CONTACT_URL)
        ]
    ])

def category_keyboard(categories):
    cat_buttons = [
        InlineKeyboardButton(name, callback_data=f"cat_{key}")
        for key, name in categories.items()
    ]
    cat_buttons = [cat_buttons[i:i + 2] for i in range(0, len(cat_buttons), 2)]
    nav_buttons = [
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="home"),
            InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")
        ],
        [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=CONTACT_URL)]
    ]
    return InlineKeyboardMarkup(cat_buttons + nav_buttons)

def product_keyboard(product):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí∂ ‚Ç¨{product['price']}", callback_data="noop")],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_{product['category']}"),
            InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")
        ],
        [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=CONTACT_URL)]
    ])

def default_nav_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="home"),
            InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")
        ],
        [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=CONTACT_URL)]
    ])

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    print(f"‚ñ∂Ô∏è `/start` –æ—Ç {user.username} (ID: {user.id}) –≤ {datetime.now()}")
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    print(f"üü¢ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: `{query.data}` –æ—Ç `@{user.username}` (ID: {user.id})")
    await query.answer()

    # ! –ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —Å —Ü–µ–Ω–æ–π –Ω–µ —É–¥–∞–ª—è–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —á–∞—Ç–µ
    if query.data == "noop":
        await query.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω–∞, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ
    album = context.user_data.pop("last_album", [])
    for msg_id in album:
        try:
            await context.bot.delete_message(chat_id=query.message.chat.id, message_id=msg_id)
        except Exception:
            pass

    # üîò –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if query.data == "available":
        await query.edit_message_text(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=category_keyboard(categories)
        )

    # üîò –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif query.data.startswith("cat_"):
        cat_key = query.data[4:]
        product_buttons = [
            [InlineKeyboardButton(p["name"], callback_data=k)]
            for k, p in products.items() if p.get("category") == cat_key
        ]
        if not product_buttons:
            product_buttons = [[InlineKeyboardButton("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="available")]]
        nav_buttons = [
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="available"),
                InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")
            ],
            [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=CONTACT_URL)]
        ]
        await query.edit_message_text(
            f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories.get(cat_key, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            reply_markup=InlineKeyboardMarkup(product_buttons + nav_buttons)
        )

    # üîò –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
    elif query.data in products:
        product = products[query.data]
        if not product.get("photos"):
            print(f"üñºÔ∏è –£ —Ç–æ–≤–∞—Ä–∞ '{product['name']}' –Ω–µ—Ç —Ñ–æ—Ç–æ")
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="üñºÔ∏è –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
                reply_markup=product_keyboard(product),
                parse_mode="HTML"
            )
        else:
            print(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(product['photos'])} —Ñ–æ—Ç–æ –ø–æ —Ç–æ–≤–∞—Ä—É '{product['name']}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `@{user.username}`")
            media = [InputMediaPhoto(url) for url in product["photos"]]
            sent = await context.bot.send_media_group(chat_id=query.message.chat.id, media=media)
            context.user_data["last_album"] = [m.message_id for m in sent]
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text=product["description"],
                reply_markup=product_keyboard(product),
                parse_mode="HTML"
            )
        await query.delete_message()

    # üîò –û–ø–∏—Å–∞–Ω–∏–µ
    elif query.data == "about":
        await query.edit_message_text(
            about_text,
            reply_markup=default_nav_keyboard()
        )

    # üîò –î–æ—Å—Ç–∞–≤–∫–∞
    elif query.data == "delivery":
        await query.edit_message_text(
            delivery_text,
            reply_markup=default_nav_keyboard(),
            parse_mode="HTML"
        )

    # üîò –û–ø–ª–∞—Ç–∞
    elif query.data == "payment":
        await query.edit_message_text(
            payment_text,
            reply_markup=default_nav_keyboard(),
            parse_mode="HTML"
        )

    # üîò –£—Å–ª—É–≥–∏
    elif query.data == "services":
        await query.edit_message_text(
            services_text,
            reply_markup=default_nav_keyboard(),
            parse_mode="HTML"
        )

    # üîò –ì–∞—Ä–∞–Ω—Ç–∏—è –∏ –æ—Ç–∫–∞–∑
    elif query.data == "warranty":
        await query.edit_message_text(
            warranty_text,
            reply_markup=default_nav_keyboard(),
            parse_mode="HTML"
        )

    # üîò –ù–∞ –≥–ª–∞–≤–Ω—É—é
    elif query.data == "home":
        await query.edit_message_text(
            "üëã –í—ã —Å–Ω–æ–≤–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. \nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
keep_alive()
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    start_time = time.time()
    try:
        if sys.platform.startswith("win"):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        app = Application.builder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(handle_buttons))
        print(f"üïí Bot started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        app.run_polling()
    except Exception as e:
        uptime = time.time() - start_time
        print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ {uptime:.2f} —Å–µ–∫—É–Ω–¥: {type(e).__name__}: {e}")
        traceback.print_exc()
        time.sleep(10)
        input("Press any key to exit...")